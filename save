import { Server as SocketIOServer } from "socket.io";
import dotenv from "dotenv";
import User from "../models/user-model.js";
dotenv.config();

const setupSocket = (server) => {
  const io = new SocketIOServer(server, {
    cors: {
      origin: process.env.ORIGIN,
      methods: ["GET", "POST"],
      credentials: true,
    },
  });

  const userSocketMap = new Map();

  //   const disconnect = (socket) => {
  //     console.log("Client Disconnected:" + socket.id);

  //     for (const [userId, socketId] of userSocketMap.entries()) {
  //       userSocketMap.delete(userId);
  //       User.findByIdAndUpdate(
  //         userId,
  //         { status: false },
  //         { new: true, runValidators: true }
  //       )
  //         .exec()
  //         .then(() => console.log(`User ${userId} disconnected`))
  //         .catch((err) => console.error(err));
  //       break;
  //     }
  //   };

  io.on("connection", (socket) => {
    const userId = socket.handshake.query.userId;

    if (userId) {
      User.findByIdAndUpdate(userId, { status: true }, { new: true })
        .then(() => {
          console.log(`User ${userId} connected with socket ID: ${socket.id}`);
          io.emit("user-status-update", { userId, status: "online" }); // Kirimkan update status ke semua klien
        })
        .catch((err) => console.error(err));

      socket.on("disconnect", () => {
        console.log(`Client Disconnected: ${socket.id}`);

        User.findByIdAndUpdate(userId, { status: false }, { new: true })
          .then(() => {
            console.log(`User ${userId} marked as offline`);
            io.emit("user-status-update", { userId, status: "offline" }); // Kirimkan update status ke semua klien
          })
          .catch((err) => console.error(err));
      });
    } else {
      console.log("User ID is not provided during connection.");
    }
  });
};

export default setupSocket;
